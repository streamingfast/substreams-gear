{{- $generator := . }}
package convert

import (
    "fmt"
    "reflect"

    "github.com/centrifuge/go-substrate-rpc-client/v4/registry"
    "github.com/centrifuge/go-substrate-rpc-client/v4/types"
    pbgearextrinsic "github.com/streamingfast/substreams-gear/pb/sf/substreams/vara/type/v1"
    pbgear "github.com/streamingfast/substreams-gear/pb/sf/substreams/gear/type/v1"
)

{{- $messages := $generator.Messages }}
{{- $metadatas := $generator.Metadatas }}

{{- /* ============================= */}}
{{- /* MAIN                          */}}
{{- /* ============================= */}}
{{- range $msg := $messages }}
{{- $meta := index $metadatas $msg.SpecVersion }}
    {{- template "message" wrap ( newWrapItem "msg" $msg "meta" $meta) }}
{{- end }}

{{- /* ============================= */}}
{{- /* MESSAGE                       */}}
{{- /* ============================= */}}
{{ define "message" }}
{{- $msg := .msg }}
{{- $meta := .meta }}
{{- $generator := .generator }}
{{- $funcName := $generator.FuncNameForMessage $msg }}
{{- $seen := $generator.IsSeen $funcName }}
{{- $ignore := $generator.Seen $funcName}}

{{- if and (not $seen) }}
func {{ $funcName }}(in any) {{ $msg.ReturnType $meta }} {
    out := {{$msg.OutputType $meta}}{}
    v := in.(registry.Valuable)
    _ = v

    {{- template "messageFields" wrap ( newWrapItem "fields" $msg.Fields "msg" $msg "meta" $meta) }}

    return out //from message
}

{{- $numOfFields := len $msg.Fields }}
{{- if and ($msg.IsCall) (ne $numOfFields 0) }}
func {{ $funcName }}_wrap(in any) *pbgearextrinsic.Extrinsic{
    res := {{ $funcName }}(in)
    out := &pbgearextrinsic.Extrinsic_{{ $msg.WrapTypeName }}{ }
    reflect.ValueOf(out).Elem().FieldByName("{{ $msg.WrapTypeName }}").Set(reflect.ValueOf(res))
    return &pbgearextrinsic.Extrinsic{
        Call: out,
    }
}
{{- end }}
{{- template "funcForMessageFieldsTo" wrap ( newWrapItem "fields" $msg.Fields "msg" $msg "meta" $meta)}}
{{- end }}
{{- end }}

{{- /* ============================= */}}
{{- /* MESSAGE Fields                */}}
{{- /* ============================= */}}
{{ define "messageFields" }}
{{- $fields := .fields }}
{{- $msg := .msg }}
{{- $meta := .meta }}
{{ range $index, $field := $fields }}
        {{- if $field.IsPrimitive}}
            {{- template "primitiveField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg "meta" $meta) }}
        {{- else if $field.IsRepeated }}
            {{- template "repeatedField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg "meta" $meta) }}
        {{- else if $field.IsOptional }}
            {{- template "optionalField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg "meta" $meta) }}
        {{- else if $field.IsOneOf }}
            {{- template "oneOfField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg "meta" $meta) }}
        {{- else }}
            {{- template "field" wrap ( newWrapItem "field" $field "index" $index "msg" $msg "meta" $meta) }}
        {{- end }}
    {{- end }}
{{- end }}

{{- /* ============================= */}}
{{- /* Field                         */}}
{{- /* ============================= */}}
{{ define "field" }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}
{{- $meta := .meta }}
{{- $generator := .generator }}
    // field {{ $field.ToFieldName }} To_{{ $field.FullTypeName }}(w)
    out.{{ $field.ToFieldName }} = {{ $generator.FuncNameForField $msg $field }}(v.ValueAt({{ $index }}))
{{- end }}

{{- /* ============================= */}}
{{- /* Primitive Field                */}}
{{- /* ============================= */}}
{{ define "primitiveField" }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}
{{- $meta := .meta }}
{{- $generator := .generator }}
    // primitive field {{ $field.ToFieldName }}
    {{- $optional := $field.IsOptional }}
    {{- if $optional}}
    if v.HasValue() {
    {{- end }}
        out.{{ $field.ToFieldName }} = {{ $generator.FuncNameForPrimitive $msg $field }}(v.ValueAt({{ $index }}))
    {{- if $optional}}
    }
    {{- end }}
{{- end }}

{{- /* ============================= */}}
{{- /* Optional Field                */}}
{{- /* ============================= */}}
{{ define "optionalField" }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}
{{- $meta := .meta }}
{{- $generator := .generator }}
    // optional field {{ $field.ToFieldName }} {{ $field.IsOptional }}
    if v.HasValue() {
        out.{{ $field.ToFieldName }} = {{ $generator.FuncNameForOptional $msg $field }}(v.ValueAt({{ $index }}))
    }
{{- end }}

{{- /* ============================= */}}
{{- /* Repeated Field               */}}
{{- /* ============================= */}}
{{ define "repeatedField" }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}
{{- $meta := .meta }}
{{- $generator := .generator }}
    // repeated field {{ $field.ToFieldName }}
    out.{{ $field.ToFieldName }} = {{ $generator.FuncNameForRepeated $msg $field }}(v.ValueAt({{ $index }}))
{{- end }}

{{- /* ============================= */}}
{{- /* OneOf Field                   */}}
{{- /* ============================= */}}
{{ define "oneOfField" }}
{{- $field := .field }}
{{- $meta := .meta }}
{{- $generator := .generator }}
{{- $index := .index }}
{{- $msg := .msg }}
    // oneOf field {{ $field.ToFieldName }}
    v{{ $index}} := {{ $generator.FuncNameForOneOf  $msg $field }}(v.ValueAt({{ $index }}))
    reflect.ValueOf(out).Elem().FieldByName("{{ $field.ToFieldName }}").Set(reflect.ValueOf(v{{ $index}}))

{{- end }}

{{- /* ============================= */}}
{{- /* Func For MESSAGE Fields       */}}
{{- /* ============================= */}}
{{ define "funcForMessageFieldsTo" }}
    {{- $fields := .fields }}
    {{- $msg := .msg }}
    {{- $meta := .meta }}
    {{ range $index, $field := $fields }}
        {{- if $field.IsRepeated }}
            {{- template "funcForRepeatedField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg "meta" $meta) }}
        {{- else if $field.IsOptional }}
            {{- template "funcForOptionalField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg "meta" $meta) }}
        {{- else if $field.IsOneOf }}
            {{- template "funcForOneOfField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg "meta" $meta) }}
        {{- else if $field.IsPrimitive }}
        {{- else }}
{{/*            {{- template "funcForField" wrap ( newWrapItem "field" $field "index" $index "msg" $msg "meta" $meta) }}*/}}
        {{- end }}
    {{- end }}
{{- end }}

{{- /* ============================= */}}
{{- /* funcForField             */}}
{{- /* ============================= */}}
{{ define "funcForField" }}
    {{- $generator := .generator }}
    {{- $meta := .meta }}
    {{- $msg := .msg }}
    {{- $field := .field }}
    {{- $index := .index }}
    {{- $funcName := $generator.FuncNameForField $msg $field }}

    {{- $seen := $generator.IsSeen $funcName }}
    {{- $ignore := $generator.Seen $funcName}}
    {{- if not $seen }}
func {{ $funcName }}(in any) {{ $field.ReturnType  $meta }} {
    v := in.(registry.Valuable)
    var w any
    if i, ok := v.(registry.Valuable); ok {
        w = &Wrap{Value: i}
    } else{
        w = v.ValueAt(0)
    }

    return To_{{ $field.FullTypeName }}(w) //simple field
}
    {{- end }}
{{- end }}

{{- /* ============================= */}}
{{- /* funcForRepeatedField          */}}
{{- /* ============================= */}}
{{ define "funcForRepeatedField" }}
{{- $generator := .generator }}
{{- $meta := .meta }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}
{{ $funcName := $generator.FuncNameForRepeated $msg $field }}

{{- $seen := $generator.IsSeen $funcName }}
{{- $ignore := $generator.Seen $funcName}}
{{- if and (not $seen) (not $field.Primitive) }}
func {{ $funcName }}(in any) []*{{ $field.ReturnType  $meta }} {
    items := in.([]interface{})

    var out []*{{ $field.ReturnType  $meta }}
    for _, item := range items {
		w := item
		if i, ok := w.(registry.Valuable); ok {//ugly ack the will bite later
			w = &Wrap{Value: i}
		}
        o := To_{{ $field.FullTypeName }}(w)
        out = append(out, o)
    }
    return nil //funcForRepeatedField
}
{{- end }}
{{- end }}

{{- /* ============================= */}}
{{- /* funcForOptionalField          */}}
{{- /* ============================= */}}
{{ define "funcForOptionalField" }}
{{- $generator := .generator }}
{{- $meta := .meta }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}
{{- $funcName := $generator.FuncNameForOptional $msg $field }}

{{- $seen := $generator.IsSeen $funcName }}
{{- $ignore := $generator.Seen $funcName}}
{{- if and (not $seen) (not $field.Primitive) }}
func {{ $funcName }}(in any) {{ $field.ReturnType  $meta }} {
    panic("Not implemented")
    return nil //funcForOptionalField
}
{{- end }}
{{- end }}

{{- /* ============================= */}}
{{- /* funcForOneOfField             */}}
{{- /* ============================= */}}
{{ define "funcForOneOfField" }}
{{- $generator := .generator }}
{{- $meta := .meta }}
{{- $msg := .msg }}
{{- $field := .field }}
{{- $index := .index }}

{{- $funcName := $generator.FuncNameForOneOf $msg $field }}
{{- $seen := $generator.IsSeen $funcName }}
{{- $ignore := $generator.Seen $funcName}}

{{- if not $seen }}
func {{ $funcName }} (in any) any  {
{{- if not $field.Types }}
    return nil
{{- else }}
    variantIn := in.(*registry.VariantWTF)
    param := variantIn.Value
    switch variantIn.VariantByte {
    {{- range  $t := $field.Types}}
    case {{ $t.VariantByte }}:
        return &pbgear.{{$msg.FullTypeName}}_{{ $field.ToFieldName }}{{$t.ToFieldName}}{
        {{ $field.ToFieldName }}{{$t.ToFieldName}}: To_{{ $t.FullTypeName }}(param),
        }
    {{- end }}
    default:
        panic(fmt.Sprintf("Unknown variant byte: %d", variantIn.VariantByte))
    }
{{- end }}
}
{{- end }}
{{- end }}

type Wrap struct {
	Value registry.Valuable
}

func (w Wrap) ValueAt(index int) any {
    return w.Value
}

func To_bytes(a any) []byte {
	var items []any
	switch in := a.(type) {
	case registry.DecodedFields:
		fields := []*registry.DecodedField(in)
		items = fields[0].Value.([]any)
	case []any:
		items = in
	default:
		panic(fmt.Sprintf("Unsupported type %T", in))
	}
	var out []byte
	for _, i := range items {
		u := uint8(i.(types.U8))
		out = append(out, byte(u))
	}
	return out
}

func To_string(i any) string {
	switch v := i.(type) {
	case types.UCompact:
		return fmt.Sprintf("%d", v.Int64())
	case types.Text:
		return string(v)
	case types.U128:
		return v.String()
	case types.U256:
		return v.String()
	case types.I128:
		return v.String()
	case types.I256:
		return v.String()
	default:
		panic("Unknown type")
	}
}

func To_uint32(i any) uint32 {
    switch v := i.(type) {
    case types.UCompact:
        return uint32(v.Int64())
    case types.U8:
        return uint32(v)
    case types.U16:
        return uint32(v)
    case types.U32:
        return uint32(v)
    default:
        panic("Unknown type")
    }
}

func To_Optional_uint32(i any) *uint32 {
    o := To_uint32(i)
    return &o
}

func To_uint64(a any) uint64 {
    switch v := a.(type) {
    case types.UCompact:
        return uint64(v.Int64())
    case types.U8:
        return uint64(v)
    case types.U16:
        return uint64(v)
    case types.U32:
        return uint64(v)
    case types.U64:
        return uint64(v)
    case uint8:
        return uint64(v)
    case uint16:
        return uint64(v)
    case uint32:
        return uint64(v)
    case uint64:
        return uint64(v)
    default:
        panic("Unknown type")
    }
}

func To_Optional_uint64(i any) *uint64 {
    o := To_uint64(i)
    return &o
}

func To_Optional_string(a any) *string {
    s := To_string(a)
    return &s
}

func To_bool(b any) bool {
    return b.(bool)
}

func To_Optional_bool(b any) *bool {
    o :=  To_bool(b)
    return &o
}

func To_Repeated_uint32(a any) []uint32 {
    panic("To_repeated_uint32")
}

var FuncMap map[string]reflect.Value

func init(){
    FuncMap = make(map[string]reflect.Value)

{{- range $msg := $messages }}
    {{- $numOfFields := len $msg.Fields }}
    {{- if and ($msg.IsCall) (ne $numOfFields 0) }}
    {{- $funcName := $generator.FuncNameForMessage $msg }}
    FuncMap["{{ $funcName }}"] = reflect.ValueOf({{ $funcName }}_wrap)
    {{- end}}
{{- end }}
}
